/******************************************************************************
 * This file was generated by langium-cli 3.3.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import type { AstNode, Reference, ReferenceInfo, TypeMetaData } from 'langium';
import { AbstractAstReflection } from 'langium';

export const CardDslTerminals = {
    INDENT: /synthetic:indent/,
    DEDENT: /synthetic:dedent/,
    WS: /[\t ]+/,
    NL: /[\r\n]+/,
    ID: /[_a-zA-Z][\w_-]*/,
    INT: /[0-9]+/,
    STRING: /"[^"]*"|'[^']*'/,
    ML_COMMENT: /\/\*[\s\S]*?\*\//,
    SL_COMMENT: /\/\/[^\n\r]*|#[^\n\r]*/,
};

export type CardDslTerminalNames = keyof typeof CardDslTerminals;

export type CardDslKeywordNames = 
    | "!="
    | "$"
    | "("
    | ")"
    | "*"
    | "+"
    | ","
    | "-"
    | "."
    | "/"
    | ":"
    | "<"
    | "<="
    | "="
    | ">"
    | ">="
    | "["
    | "[effect]"
    | "]"
    | "abilities"
    | "ability"
    | "activate"
    | "active"
    | "and"
    | "artwork"
    | "attack"
    | "attacking"
    | "auto"
    | "battlefield"
    | "beast"
    | "by"
    | "cancel"
    | "cards"
    | "category"
    | "change"
    | "coin"
    | "construct"
    | "damaged"
    | "dark"
    | "death"
    | "deck"
    | "decrease"
    | "demon"
    | "description"
    | "destroy"
    | "discard"
    | "divine"
    | "dragon"
    | "draw"
    | "earth"
    | "effect"
    | "equal"
    | "fire"
    | "flip"
    | "from"
    | "gain"
    | "graveyard"
    | "hand"
    | "healed"
    | "hp"
    | "id"
    | "increase"
    | "life"
    | "light"
    | "limit"
    | "loose"
    | "monster"
    | "name"
    | "of"
    | "on"
    | "opponent"
    | "opponents"
    | "or"
    | "passive"
    | "select"
    | "spectral"
    | "spell"
    | "spellcaster"
    | "spirit"
    | "stars"
    | "summon"
    | "target"
    | "the"
    | "this"
    | "to"
    | "traits"
    | "trap"
    | "trigger"
    | "type"
    | "undead"
    | "warrior"
    | "water"
    | "where"
    | "wind"
    | "your";

export type CardDslTokenNames = CardDslTerminalNames | CardDslKeywordNames;

export type AbilityStep = EffectStep | SelectStep;

export const AbilityStep = 'AbilityStep';

export function isAbilityStep(item: unknown): item is AbilityStep {
    return reflection.isInstance(item, AbilityStep);
}

export type CardType = 'monster' | 'spell' | 'trap';

export function isCardType(item: unknown): item is CardType {
    return item === 'monster' || item === 'spell' || item === 'trap';
}

export type Condition = Expr;

export const Condition = 'Condition';

export function isCondition(item: unknown): item is Condition {
    return reflection.isInstance(item, Condition);
}

export type ElementCategory = 'dark' | 'earth' | 'fire' | 'light' | 'water' | 'wind';

export function isElementCategory(item: unknown): item is ElementCategory {
    return item === 'dark' || item === 'light' || item === 'fire' || item === 'water' || item === 'earth' || item === 'wind';
}

export type Expr = BinExpr | CardTypeConstant | ElementCategoryConstant | IntConstant | IntConstantExpr | MonsterTraitConstant | ThisConstant | VariableExpression;

export const Expr = 'Expr';

export function isExpr(item: unknown): item is Expr {
    return reflection.isInstance(item, Expr);
}

export type MonsterTrait = 'beast' | 'construct' | 'demon' | 'divine' | 'dragon' | 'spectral' | 'spellcaster' | 'spirit' | 'undead' | 'warrior';

export function isMonsterTrait(item: unknown): item is MonsterTrait {
    return item === 'spellcaster' || item === 'beast' || item === 'construct' || item === 'demon' || item === 'divine' || item === 'dragon' || item === 'spectral' || item === 'spirit' || item === 'undead' || item === 'warrior';
}

export type SelectSource = string;

export function isSelectSource(item: unknown): item is SelectSource {
    return typeof item === 'string';
}

export interface Ability extends AstNode {
    readonly $container: MonsterCard;
    readonly $type: 'Ability';
    description?: string;
    name: string;
    steps: Array<AbilityStep>;
    trigger?: TriggerCondition;
    type: 'active' | 'passive';
}

export const Ability = 'Ability';

export function isAbility(item: unknown): item is Ability {
    return reflection.isInstance(item, Ability);
}

export interface ArraySize extends AstNode {
    readonly $container: VariableDecl;
    readonly $type: 'ArraySize';
    op: '<' | '=' | '>';
    value: number;
}

export const ArraySize = 'ArraySize';

export function isArraySize(item: unknown): item is ArraySize {
    return reflection.isInstance(item, ArraySize);
}

export interface BaseCard extends AstNode {
    readonly $type: 'BaseCard' | 'MonsterCard' | 'SpellCard' | 'TrapCard';
    artwork: string;
    category: string;
    id: number;
    limit?: number;
    name: string;
    type: string;
}

export const BaseCard = 'BaseCard';

export function isBaseCard(item: unknown): item is BaseCard {
    return reflection.isInstance(item, BaseCard);
}

export interface BinExpr extends AstNode {
    readonly $container: BinExpr | Effect | SelectStep | ThisConstant | TriggerEvent;
    readonly $type: 'BinExpr';
    left: Expr;
    op: '!=' | '*' | '+' | '-' | '/' | '<' | '<=' | '=' | '>' | '>=' | 'and' | 'or';
    right: Expr;
}

export const BinExpr = 'BinExpr';

export function isBinExpr(item: unknown): item is BinExpr {
    return reflection.isInstance(item, BinExpr);
}

export interface CardTypeConstant extends AstNode {
    readonly $container: BinExpr | Effect | SelectStep | ThisConstant | TriggerEvent;
    readonly $type: 'CardTypeConstant';
    value: CardTypeConstantExpr;
}

export const CardTypeConstant = 'CardTypeConstant';

export function isCardTypeConstant(item: unknown): item is CardTypeConstant {
    return reflection.isInstance(item, CardTypeConstant);
}

export interface CardTypeConstantExpr extends AstNode {
    readonly $container: CardTypeConstant;
    readonly $type: 'CardTypeConstantExpr';
    rawValue: CardType;
}

export const CardTypeConstantExpr = 'CardTypeConstantExpr';

export function isCardTypeConstantExpr(item: unknown): item is CardTypeConstantExpr {
    return reflection.isInstance(item, CardTypeConstantExpr);
}

export interface Effect extends AstNode {
    readonly $container: EffectStep;
    readonly $type: 'Effect';
    action: 'cancel' | 'change' | 'decrease' | 'destroy' | 'discard' | 'draw' | 'gain' | 'increase' | 'loose' | 'summon';
    amount?: Expr | number;
    cancel?: 'attack' | 'effect';
    isOpponent: boolean;
    newTarget?: Variable;
    stat?: 'attack' | 'hp';
    target?: Variable;
}

export const Effect = 'Effect';

export function isEffect(item: unknown): item is Effect {
    return reflection.isInstance(item, Effect);
}

export interface EffectStep extends AstNode {
    readonly $container: Ability | SpellCard | TrapCard;
    readonly $type: 'EffectStep';
    effect: Effect;
}

export const EffectStep = 'EffectStep';

export function isEffectStep(item: unknown): item is EffectStep {
    return reflection.isInstance(item, EffectStep);
}

export interface ElementCategoryConstant extends AstNode {
    readonly $container: BinExpr | Effect | SelectStep | ThisConstant | TriggerEvent;
    readonly $type: 'ElementCategoryConstant';
    value: ElementCategoryConstantExpr;
}

export const ElementCategoryConstant = 'ElementCategoryConstant';

export function isElementCategoryConstant(item: unknown): item is ElementCategoryConstant {
    return reflection.isInstance(item, ElementCategoryConstant);
}

export interface ElementCategoryConstantExpr extends AstNode {
    readonly $container: ElementCategoryConstant;
    readonly $type: 'ElementCategoryConstantExpr';
    rawValue: ElementCategory;
}

export const ElementCategoryConstantExpr = 'ElementCategoryConstantExpr';

export function isElementCategoryConstantExpr(item: unknown): item is ElementCategoryConstantExpr {
    return reflection.isInstance(item, ElementCategoryConstantExpr);
}

export interface IntConstant extends AstNode {
    readonly $container: BinExpr | Effect | SelectStep | ThisConstant | TriggerEvent;
    readonly $type: 'IntConstant';
    value: IntConstantExpr;
}

export const IntConstant = 'IntConstant';

export function isIntConstant(item: unknown): item is IntConstant {
    return reflection.isInstance(item, IntConstant);
}

export interface IntConstantExpr extends AstNode {
    readonly $container: BinExpr | Effect | IntConstant | SelectStep | ThisConstant | TriggerEvent;
    readonly $type: 'IntConstantExpr';
    rawValue: number;
}

export const IntConstantExpr = 'IntConstantExpr';

export function isIntConstantExpr(item: unknown): item is IntConstantExpr {
    return reflection.isInstance(item, IntConstantExpr);
}

export interface Model extends AstNode {
    readonly $type: 'Model';
    cards: Array<BaseCard>;
}

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export interface MonsterTraitConstant extends AstNode {
    readonly $container: BinExpr | Effect | SelectStep | ThisConstant | TriggerEvent;
    readonly $type: 'MonsterTraitConstant';
    value: MonsterTraitConstantExpr;
}

export const MonsterTraitConstant = 'MonsterTraitConstant';

export function isMonsterTraitConstant(item: unknown): item is MonsterTraitConstant {
    return reflection.isInstance(item, MonsterTraitConstant);
}

export interface MonsterTraitConstantExpr extends AstNode {
    readonly $container: MonsterTraitConstant;
    readonly $type: 'MonsterTraitConstantExpr';
    rawValue: MonsterTrait;
}

export const MonsterTraitConstantExpr = 'MonsterTraitConstantExpr';

export function isMonsterTraitConstantExpr(item: unknown): item is MonsterTraitConstantExpr {
    return reflection.isInstance(item, MonsterTraitConstantExpr);
}

export interface SelectStep extends AstNode {
    readonly $container: Ability | SpellCard | TrapCard;
    readonly $type: 'SelectStep';
    auto: boolean;
    condition?: Condition;
    source: SelectSource;
    variable: VariableDecl;
}

export const SelectStep = 'SelectStep';

export function isSelectStep(item: unknown): item is SelectStep {
    return reflection.isInstance(item, SelectStep);
}

export interface ThisConstant extends AstNode {
    readonly $container: BinExpr | Effect | SelectStep | ThisConstant | TriggerEvent;
    readonly $type: 'ThisConstant';
    value: Expr;
}

export const ThisConstant = 'ThisConstant';

export function isThisConstant(item: unknown): item is ThisConstant {
    return reflection.isInstance(item, ThisConstant);
}

export interface TriggerCondition extends AstNode {
    readonly $container: Ability | TrapCard;
    readonly $type: 'TriggerCondition';
    event: TriggerEvent;
}

export const TriggerCondition = 'TriggerCondition';

export function isTriggerCondition(item: unknown): item is TriggerCondition {
    return reflection.isInstance(item, TriggerCondition);
}

export interface TriggerEvent extends AstNode {
    readonly $container: TriggerCondition;
    readonly $type: 'TriggerEvent';
    activatedEntity?: 'ability' | 'spell' | 'trap';
    attacked?: VariableDecl;
    condition?: Condition;
    isOpponent?: 'opponent';
    target?: VariableDecl;
    trigger: 'activate' | 'attack' | 'damaged' | 'death' | 'discard' | 'draw' | 'healed' | 'summon';
}

export const TriggerEvent = 'TriggerEvent';

export function isTriggerEvent(item: unknown): item is TriggerEvent {
    return reflection.isInstance(item, TriggerEvent);
}

export interface Variable extends AstNode {
    readonly $container: Effect | VariableExpr;
    readonly $type: 'Variable';
    index?: number;
    prop?: 'attack' | 'category' | 'hp' | 'id' | 'stars' | 'traits' | 'type';
    ref: Reference<VariableDecl>;
}

export const Variable = 'Variable';

export function isVariable(item: unknown): item is Variable {
    return reflection.isInstance(item, Variable);
}

export interface VariableDecl extends AstNode {
    readonly $container: SelectStep | TriggerEvent;
    readonly $type: 'VariableDecl';
    name: string;
    size?: ArraySize;
}

export const VariableDecl = 'VariableDecl';

export function isVariableDecl(item: unknown): item is VariableDecl {
    return reflection.isInstance(item, VariableDecl);
}

export interface VariableExpr extends AstNode {
    readonly $container: VariableExpression;
    readonly $type: 'VariableExpr';
    rawValue: Variable;
}

export const VariableExpr = 'VariableExpr';

export function isVariableExpr(item: unknown): item is VariableExpr {
    return reflection.isInstance(item, VariableExpr);
}

export interface VariableExpression extends AstNode {
    readonly $container: BinExpr | Effect | SelectStep | ThisConstant | TriggerEvent;
    readonly $type: 'VariableExpression';
    value: VariableExpr;
}

export const VariableExpression = 'VariableExpression';

export function isVariableExpression(item: unknown): item is VariableExpression {
    return reflection.isInstance(item, VariableExpression);
}

export interface MonsterCard extends BaseCard {
    readonly $type: 'MonsterCard';
    abilities: Array<Ability>;
    attack: number;
    description: string;
    health: number;
    stars: number;
    traits: Array<MonsterTrait>;
}

export const MonsterCard = 'MonsterCard';

export function isMonsterCard(item: unknown): item is MonsterCard {
    return reflection.isInstance(item, MonsterCard);
}

export interface SpellCard extends BaseCard {
    readonly $type: 'SpellCard';
    description: string;
    steps: Array<AbilityStep>;
}

export const SpellCard = 'SpellCard';

export function isSpellCard(item: unknown): item is SpellCard {
    return reflection.isInstance(item, SpellCard);
}

export interface TrapCard extends BaseCard {
    readonly $type: 'TrapCard';
    description: string;
    steps: Array<AbilityStep>;
    trigger: TriggerCondition;
}

export const TrapCard = 'TrapCard';

export function isTrapCard(item: unknown): item is TrapCard {
    return reflection.isInstance(item, TrapCard);
}

export type CardDslAstType = {
    Ability: Ability
    AbilityStep: AbilityStep
    ArraySize: ArraySize
    BaseCard: BaseCard
    BinExpr: BinExpr
    CardTypeConstant: CardTypeConstant
    CardTypeConstantExpr: CardTypeConstantExpr
    Condition: Condition
    Effect: Effect
    EffectStep: EffectStep
    ElementCategoryConstant: ElementCategoryConstant
    ElementCategoryConstantExpr: ElementCategoryConstantExpr
    Expr: Expr
    IntConstant: IntConstant
    IntConstantExpr: IntConstantExpr
    Model: Model
    MonsterCard: MonsterCard
    MonsterTraitConstant: MonsterTraitConstant
    MonsterTraitConstantExpr: MonsterTraitConstantExpr
    SelectStep: SelectStep
    SpellCard: SpellCard
    ThisConstant: ThisConstant
    TrapCard: TrapCard
    TriggerCondition: TriggerCondition
    TriggerEvent: TriggerEvent
    Variable: Variable
    VariableDecl: VariableDecl
    VariableExpr: VariableExpr
    VariableExpression: VariableExpression
}

export class CardDslAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return [Ability, AbilityStep, ArraySize, BaseCard, BinExpr, CardTypeConstant, CardTypeConstantExpr, Condition, Effect, EffectStep, ElementCategoryConstant, ElementCategoryConstantExpr, Expr, IntConstant, IntConstantExpr, Model, MonsterCard, MonsterTraitConstant, MonsterTraitConstantExpr, SelectStep, SpellCard, ThisConstant, TrapCard, TriggerCondition, TriggerEvent, Variable, VariableDecl, VariableExpr, VariableExpression];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            case BinExpr:
            case CardTypeConstant:
            case ElementCategoryConstant:
            case IntConstant:
            case IntConstantExpr:
            case MonsterTraitConstant:
            case ThisConstant:
            case VariableExpression: {
                return this.isSubtype(Expr, supertype);
            }
            case EffectStep:
            case SelectStep: {
                return this.isSubtype(AbilityStep, supertype);
            }
            case Expr: {
                return this.isSubtype(Condition, supertype);
            }
            case MonsterCard:
            case SpellCard:
            case TrapCard: {
                return this.isSubtype(BaseCard, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'Variable:ref': {
                return VariableDecl;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case Ability: {
                return {
                    name: Ability,
                    properties: [
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'steps', defaultValue: [] },
                        { name: 'trigger' },
                        { name: 'type' }
                    ]
                };
            }
            case ArraySize: {
                return {
                    name: ArraySize,
                    properties: [
                        { name: 'op' },
                        { name: 'value' }
                    ]
                };
            }
            case BaseCard: {
                return {
                    name: BaseCard,
                    properties: [
                        { name: 'artwork' },
                        { name: 'category' },
                        { name: 'id' },
                        { name: 'limit' },
                        { name: 'name' },
                        { name: 'type' }
                    ]
                };
            }
            case BinExpr: {
                return {
                    name: BinExpr,
                    properties: [
                        { name: 'left' },
                        { name: 'op' },
                        { name: 'right' }
                    ]
                };
            }
            case CardTypeConstant: {
                return {
                    name: CardTypeConstant,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case CardTypeConstantExpr: {
                return {
                    name: CardTypeConstantExpr,
                    properties: [
                        { name: 'rawValue' }
                    ]
                };
            }
            case Effect: {
                return {
                    name: Effect,
                    properties: [
                        { name: 'action' },
                        { name: 'amount' },
                        { name: 'cancel' },
                        { name: 'isOpponent', defaultValue: false },
                        { name: 'newTarget' },
                        { name: 'stat' },
                        { name: 'target' }
                    ]
                };
            }
            case EffectStep: {
                return {
                    name: EffectStep,
                    properties: [
                        { name: 'effect' }
                    ]
                };
            }
            case ElementCategoryConstant: {
                return {
                    name: ElementCategoryConstant,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case ElementCategoryConstantExpr: {
                return {
                    name: ElementCategoryConstantExpr,
                    properties: [
                        { name: 'rawValue' }
                    ]
                };
            }
            case IntConstant: {
                return {
                    name: IntConstant,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case IntConstantExpr: {
                return {
                    name: IntConstantExpr,
                    properties: [
                        { name: 'rawValue' }
                    ]
                };
            }
            case Model: {
                return {
                    name: Model,
                    properties: [
                        { name: 'cards', defaultValue: [] }
                    ]
                };
            }
            case MonsterTraitConstant: {
                return {
                    name: MonsterTraitConstant,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case MonsterTraitConstantExpr: {
                return {
                    name: MonsterTraitConstantExpr,
                    properties: [
                        { name: 'rawValue' }
                    ]
                };
            }
            case SelectStep: {
                return {
                    name: SelectStep,
                    properties: [
                        { name: 'auto', defaultValue: false },
                        { name: 'condition' },
                        { name: 'source' },
                        { name: 'variable' }
                    ]
                };
            }
            case ThisConstant: {
                return {
                    name: ThisConstant,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case TriggerCondition: {
                return {
                    name: TriggerCondition,
                    properties: [
                        { name: 'event' }
                    ]
                };
            }
            case TriggerEvent: {
                return {
                    name: TriggerEvent,
                    properties: [
                        { name: 'activatedEntity' },
                        { name: 'attacked' },
                        { name: 'condition' },
                        { name: 'isOpponent' },
                        { name: 'target' },
                        { name: 'trigger' }
                    ]
                };
            }
            case Variable: {
                return {
                    name: Variable,
                    properties: [
                        { name: 'index' },
                        { name: 'prop' },
                        { name: 'ref' }
                    ]
                };
            }
            case VariableDecl: {
                return {
                    name: VariableDecl,
                    properties: [
                        { name: 'name' },
                        { name: 'size' }
                    ]
                };
            }
            case VariableExpr: {
                return {
                    name: VariableExpr,
                    properties: [
                        { name: 'rawValue' }
                    ]
                };
            }
            case VariableExpression: {
                return {
                    name: VariableExpression,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case MonsterCard: {
                return {
                    name: MonsterCard,
                    properties: [
                        { name: 'abilities', defaultValue: [] },
                        { name: 'artwork' },
                        { name: 'attack' },
                        { name: 'category' },
                        { name: 'description' },
                        { name: 'health' },
                        { name: 'id' },
                        { name: 'limit' },
                        { name: 'name' },
                        { name: 'stars' },
                        { name: 'traits', defaultValue: [] },
                        { name: 'type' }
                    ]
                };
            }
            case SpellCard: {
                return {
                    name: SpellCard,
                    properties: [
                        { name: 'artwork' },
                        { name: 'category' },
                        { name: 'description' },
                        { name: 'id' },
                        { name: 'limit' },
                        { name: 'name' },
                        { name: 'steps', defaultValue: [] },
                        { name: 'type' }
                    ]
                };
            }
            case TrapCard: {
                return {
                    name: TrapCard,
                    properties: [
                        { name: 'artwork' },
                        { name: 'category' },
                        { name: 'description' },
                        { name: 'id' },
                        { name: 'limit' },
                        { name: 'name' },
                        { name: 'steps', defaultValue: [] },
                        { name: 'trigger' },
                        { name: 'type' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    properties: []
                };
            }
        }
    }
}

export const reflection = new CardDslAstReflection();
